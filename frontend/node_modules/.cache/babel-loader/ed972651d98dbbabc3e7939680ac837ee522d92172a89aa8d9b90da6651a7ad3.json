{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\nexport const apiService = {\n  // Transaction endpoints\n  uploadCSV: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/transactions/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  getTransactions: async params => {\n    const response = await api.get('/transactions', {\n      params\n    });\n    return response.data;\n  },\n  updateTransaction: async (id, updates) => {\n    const response = await api.put(`/transactions/${id}`, updates);\n    return response.data;\n  },\n  // Category endpoints\n  getCategories: async () => {\n    const response = await api.get('/categories');\n    return response.data;\n  },\n  createCategory: async category => {\n    const response = await api.post('/categories', category);\n    return response.data;\n  },\n  // Dashboard endpoints\n  getDashboardSummary: async () => {\n    const response = await api.get('/dashboard/summary');\n    return response.data;\n  },\n  // Copilot endpoint\n  queryCopilot: async question => {\n    const response = await api.post('/copilot/query', {\n      question\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","apiService","uploadCSV","file","formData","FormData","append","post","headers","getTransactions","params","response","get","data","updateTransaction","id","updates","put","getCategories","createCategory","category","getDashboardSummary","queryCopilot","question"],"sources":["/home/nicholas/TakehomeDebug/debugProject/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Transaction, Category, DashboardSummary, CopilotResponse } from '../types';\n\nconst API_BASE_URL = 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\nexport const apiService = {\n  // Transaction endpoints\n  uploadCSV: async (file: File) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/transactions/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n\n  getTransactions: async (params?: { skip?: number; limit?: number; category_id?: number }): Promise<Transaction[]> => {\n    const response = await api.get('/transactions', { params });\n    return response.data;\n  },\n\n  updateTransaction: async (id: number, updates: { category_id?: number }): Promise<Transaction> => {\n    const response = await api.put(`/transactions/${id}`, updates);\n    return response.data;\n  },\n\n  // Category endpoints\n  getCategories: async (): Promise<Category[]> => {\n    const response = await api.get('/categories');\n    return response.data;\n  },\n\n  createCategory: async (category: { name: string; keywords?: string }): Promise<Category> => {\n    const response = await api.post('/categories', category);\n    return response.data;\n  },\n\n  // Dashboard endpoints\n  getDashboardSummary: async (): Promise<DashboardSummary> => {\n    const response = await api.get('/dashboard/summary');\n    return response.data;\n  },\n\n  // Copilot endpoint\n  queryCopilot: async (question: string): Promise<CopilotResponse> => {\n    const response = await api.post('/copilot/query', { question });\n    return response.data;\n  },\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;AAEF,OAAO,MAAMI,UAAU,GAAG;EACxB;EACAC,SAAS,EAAE,MAAOC,IAAU,IAAK;IAC/B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7B,OAAOL,GAAG,CAACS,IAAI,CAAC,sBAAsB,EAAEH,QAAQ,EAAE;MAChDI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EAEDC,eAAe,EAAE,MAAOC,MAAgE,IAA6B;IACnH,MAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,eAAe,EAAE;MAAEF;IAAO,CAAC,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDC,iBAAiB,EAAE,MAAAA,CAAOC,EAAU,EAAEC,OAAiC,KAA2B;IAChG,MAAML,QAAQ,GAAG,MAAMb,GAAG,CAACmB,GAAG,CAAC,iBAAiBF,EAAE,EAAE,EAAEC,OAAO,CAAC;IAC9D,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAK,aAAa,EAAE,MAAAA,CAAA,KAAiC;IAC9C,MAAMP,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDM,cAAc,EAAE,MAAOC,QAA6C,IAAwB;IAC1F,MAAMT,QAAQ,GAAG,MAAMb,GAAG,CAACS,IAAI,CAAC,aAAa,EAAEa,QAAQ,CAAC;IACxD,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAQ,mBAAmB,EAAE,MAAAA,CAAA,KAAuC;IAC1D,MAAMV,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,oBAAoB,CAAC;IACpD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAS,YAAY,EAAE,MAAOC,QAAgB,IAA+B;IAClE,MAAMZ,QAAQ,GAAG,MAAMb,GAAG,CAACS,IAAI,CAAC,gBAAgB,EAAE;MAAEgB;IAAS,CAAC,CAAC;IAC/D,OAAOZ,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}